name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      
      image_tag:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
      
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment Validation
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      validated: ${{ steps.validate.outputs.validated }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate inputs
      id: validate
      run: |
        echo "üîç Validating deployment inputs..."
        
        # Validate environment
        if [[ "${{ github.event.inputs.environment }}" != "staging" && "${{ github.event.inputs.environment }}" != "production" ]]; then
          echo "‚ùå Invalid environment: ${{ github.event.inputs.environment }}"
          exit 1
        fi
        
        # Validate image tag format
        if [[ ! "${{ github.event.inputs.image_tag }}" =~ ^[a-zA-Z0-9._-]+$ ]]; then
          echo "‚ùå Invalid image tag format: ${{ github.event.inputs.image_tag }}"
          exit 1
        fi
        
        echo "‚úÖ Validation passed"
        echo "validated=true" >> $GITHUB_OUTPUT

    - name: Check Docker image
      run: |
        echo "üê≥ Checking if Docker image exists..."
        
        # Check if image exists in registry
        IMAGE_URL="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        
        if docker manifest inspect $IMAGE_URL > /dev/null 2>&1; then
          echo "‚úÖ Docker image found: $IMAGE_URL"
        else
          echo "‚ùå Docker image not found: $IMAGE_URL"
          if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            exit 1
          else
            echo "‚ö†Ô∏è Force deploy enabled, continuing anyway..."
          fi
        fi

  # Manual Deployment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.validated == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "‚öôÔ∏è Configuring kubectl for ${{ github.event.inputs.environment }}..."
        # Add environment-specific kubectl configuration here

    - name: Deploy application
      run: |
        echo "üöÄ Starting manual deployment..."
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Image Tag: ${{ github.event.inputs.image_tag }}"
        echo "Force Deploy: ${{ github.event.inputs.force_deploy }}"
        
        # Update image tag in deployment
        sed -i "s|ghcr.io/dharshans/3d-gaming-website:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Apply HPA only for production
        if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          kubectl apply -f k8s/hpa.yaml
        fi
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/gaming-website-deployment -n gaming-website --timeout=600s
        
        echo "‚úÖ Manual deployment completed successfully!"

    - name: Post-deployment checks
      run: |
        echo "üîç Running post-deployment checks..."
        
        # Check deployment status
        kubectl get pods -n gaming-website
        kubectl get services -n gaming-website
        kubectl get ingress -n gaming-website
        
        # Basic health check
        kubectl wait --for=condition=ready pod -l app=gaming-website -n gaming-website --timeout=300s
        
        echo "‚úÖ Post-deployment checks completed!"

    - name: Deployment summary
      run: |
        echo "üìã Deployment Summary"
        echo "===================="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Deployment time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "Status: ‚úÖ SUCCESS"
